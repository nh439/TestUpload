@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{ List<FileUpload> files = ViewBag.files;
    List<FilestorageView> storage = ViewBag.storage;
}
@using TestUpload.Models.Entity;
@using TestUpload.Models.View;
<div class="document">
    <center>
        <h1><b>My Files</b></h1>
    </center>
    <br />

    <div class="input-group mb-3" style="width:50%">
        <div class="input-group-prepend">
            <span class="input-group-text" id="basic-addon3">Search Filenames</span>
        </div>
        <input type="text" class="form-control" id="KeyInp" aria-describedby="basic-addon3" onkeyup="Commonsearch()">
        <div class="input-group-append">
            <button class="btn btn-warning" type="button" id="button-addon2" data-toggle="modal" data-target="#exampleModal">Advanced Search</button>
        </div>
    </div>
    <br />
    <button class="btn btn-primary" onclick="window.location.href='/Files/Uploads'">Add Files</button>
    &nbsp;&nbsp;
    <button class="btn btn-danger">Remove Selected</button>
    <br />
    <br />
    <br />
    <table class="table table-hover table-bordered" style="text-align:center" id="Myupload">
        <thead class="table-dark">
            <tr>
                <th></th>
                <th onclick="sortTable(1)">Id</th>
                <th onclick="sortTable(2)">Filename</th>
                <th onclick="sortTable(3)">Filesize</th>
                <th onclick="sortTable(4)">Date Created</th>
                <th onclick="sortTable(5)">Stored Type</th>
                <th onclick="sortTable(6)">Password</th>
                <th>action</th>

            </tr>

        </thead>
        <tbody class="table-success">
            @foreach (FileUpload file in files)
            {
                <tr>
                    <td>
                        @if (!string.IsNullOrEmpty(file.pass))
                        {
                            <input type="checkbox" disabled />

                        }
                        else
                        {
                            <input type="checkbox" />
                        }
                    </td>
                    <td>@file.Id</td>
                    <td>@file.Filename@file.FileExtension</td>
                    <td>@file.FileSize</td>
                    <td>@file.AddDate.ToLongDateString()</td>
                    <td>File</td>
                    <td>
                        @if (!string.IsNullOrEmpty(file.pass))
                        {
                            <i class="flag icon"></i>
                        }
                    </td>

                    <td>
                        <i class="download icon" onclick="window.open('/Files/Download/@file.Id');"></i>
                        @if (!string.IsNullOrEmpty(file.pass))
                        {
                            <i class="trash alternate icon" onclick="window.location.href = '/Files/Verifyremove/@file.Id'"></i>
                        }
                        else
                        {
                            <i class="trash alternate icon" onclick="window.location.href = '/Files/Remove/@file.Id'"></i>
                        }
                    </td>

                </tr>
            }

            @foreach (FilestorageView file in storage)
            {

                var md = file.Id + "-B";

                <tr>
                    <td>
                        @if (file.HasPassword)
                        {
                            <input type="checkbox" disabled />

                        }
                        else
                        {
                            <input type="checkbox" />
                        }
                    </td>
                    <td>@file.Id</td>
                    <td>@file.Filename@file.FileExtension</td>
                    <td>@file.FileSize</td>
                    <td>@file.AddDate.ToLongDateString()</td>
                    <td>Blob Storage</td>
                    <td>
                        @if (file.HasPassword)
                        {
                            <i class="flag icon"></i>
                        }
                    </td>

                    <td>

                        <i class="download icon" onclick="window.open('/Blob/Download/@file.Id');" ></i>
                        <i class="trash alternate icon"></i>

                    </td>

                </tr>
            }

            @if ((files == null || files.Count == 0) && (storage == null || storage.Count == 0))
            {
            <td colspan="9"> No Uploaded Files</td>
        }


            </tbody>

        </table>
        <div>
            <h1><b>Total Used : @ViewBag.space</b></h1>
        </div>
        <br />
        <br />


    </div>

    <!-- Modal -->
    <div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true" style="color:black">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Advanced Search</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <form method="post">
                    <div class="modal-body">

                        <h1>Add Date</h1>
                        <hr />

                        <div class="input-group mb-3">
                            <div class="input-group-prepend">
                                <span class="input-group-text" id="inputGroup-sizing-default">Start</span>
                            </div>
                            <input type="date" class="form-control" aria-label="Sizing example input" aria-describedby="inputGroup-sizing-default">
                        </div>
                        <div class="input-group mb-3">
                            <div class="input-group-prepend">
                                <span class="input-group-text" id="inputGroup-sizing-default">End</span>
                            </div>
                            <input type="date" class="form-control" aria-label="Sizing example input" aria-describedby="inputGroup-sizing-default">
                        </div>

                        <h1>Last Updated</h1>
                        <hr />

                        <div class="input-group mb-3">
                            <div class="input-group-prepend">
                                <span class="input-group-text" id="inputGroup-sizing-default">Start</span>
                            </div>
                            <input type="date" class="form-control" aria-label="Sizing example input" aria-describedby="inputGroup-sizing-default">
                        </div>
                        <div class="input-group mb-3">
                            <div class="input-group-prepend">
                                <span class="input-group-text" id="inputGroup-sizing-default">End</span>
                            </div>
                            <input type="date" class="form-control" aria-label="Sizing example input" aria-describedby="inputGroup-sizing-default">
                        </div>
                        <hr />

                        <div class="input-group mb-3">
                            <div class="input-group-prepend">
                                <span class="input-group-text" id="inputGroup-sizing-default">File Extension</span>
                            </div>
                            <input type="text" class="form-control" aria-label="Sizing example input" aria-describedby="inputGroup-sizing-default">
                        </div>

                        <div class="form-group row">
                            <label class="col-4"><h3>Storage Type</h3></label>
                            <div class="col-8">
                                <div class="custom-control custom-radio custom-control-inline">
                                    <input name="radio" id="radio_0" type="radio" class="custom-control-input" value="0" checked>
                                    <label for="radio_0" class="custom-control-label">All</label>
                                </div>
                                <div class="custom-control custom-radio custom-control-inline">
                                    <input name="radio" id="radio_1" type="radio" class="custom-control-input" value="1">
                                    <label for="radio_1" class="custom-control-label">Files</label>
                                </div>
                                <div class="custom-control custom-radio custom-control-inline">
                                    <input name="radio" id="radio_2" type="radio" class="custom-control-input" value="2">
                                    <label for="radio_2" class="custom-control-label">Blob</label>
                                </div>
                            </div>
                        </div>

                        <div class="form-group row">
                            <div class="col-8">
                                <div class="custom-control custom-checkbox custom-control-inline">
                                    <input name="checkbox1" id="checkbox1_0" type="checkbox" class="custom-control-input" value="rabbit">
                                    <label for="checkbox1_0" class="custom-control-label">Has Password</label>
                                </div>
                            </div>
                        </div>



                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                        <button type="button" class="btn btn-primary">Search</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <script>
        function Commonsearch() {
            var input, filter, table, tr, td, i, txtValue;
            input = document.getElementById("KeyInp");
            filter = input.value.toUpperCase();
            table = document.getElementById("Myupload");
            tr = table.getElementsByTagName("tr");
            for (i = 0; i < tr.length; i++) {
                td = tr[i].getElementsByTagName("td")[2];
                if (td) {
                    txtValue = td.textContent || td.innerText;
                    if (txtValue.toUpperCase().indexOf(filter) > -1) {
                        tr[i].style.display = "";
                    } else {
                        tr[i].style.display = "none";
                    }
                }



            }

        }

        function sortTable(n) {
            var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
            table = document.getElementById("Myupload");
            switching = true;
            // Set the sorting direction to ascending:
            dir = "asc";
            /* Make a loop that will continue until
            no switching has been done: */
            while (switching) {
                // Start by saying: no switching is done:
                switching = false;
                rows = table.rows;
                /* Loop through all table rows (except the
                first, which contains table headers): */
                for (i = 1; i < (rows.length - 1); i++) {
                    // Start by saying there should be no switching:
                    shouldSwitch = false;
                    /* Get the two elements you want to compare,
                    one from current row and one from the next: */
                    x = rows[i].getElementsByTagName("TD")[n];
                    y = rows[i + 1].getElementsByTagName("TD")[n];
                    /* Check if the two rows should switch place,
                    based on the direction, asc or desc: */
                    if (dir == "asc") {
                        if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
                            // If so, mark as a switch and break the loop:
                            shouldSwitch = true;
                            break;
                        }
                    } else if (dir == "desc") {
                        if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {
                            // If so, mark as a switch and break the loop:
                            shouldSwitch = true;
                            break;
                        }
                    }
                }
                if (shouldSwitch) {
                    /* If a switch has been marked, make the switch
                    and mark that a switch has been done: */
                    rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                    switching = true;
                    // Each time a switch is done, increase this count by 1:
                    switchcount++;
                } else {
                    /* If no switching has been done AND the direction is "asc",
                    set the direction to "desc" and run the while loop again. */
                    if (switchcount == 0 && dir == "asc") {
                        dir = "desc";
                        switching = true;
                    }
                }
            }
        }
    </script>
